[
{
	"uri": "//localhost:1313/vi/1-container-insights/",
	"title": "Container Insights",
	"tags": [],
	"description": "",
	"content": "\rĐiều kiện tiên quyết: Hoàn thành chương Fundamentals \u0026amp; ECS Service Connect trước khi bắt đầu lab này.\nTheo mặc định, Amazon ECS cung cấp các số liệu cho cluster và service. Tuy nhiên, bằng cách chọn sử dụng Container Insights, bạn có thể nâng cao sự thuận tiện trong vận hành bằng cách truy cập vào các số liệu bổ sung, giúp đơn giản hóa việc quản lý vận hành. CloudWatch Container Insights hu thập, tổng hợp và tóm tắt các số liệu và nhật ký từ các ứng dụng và microservice được container hóa của bạn. Bạn cũng có thể thiết lập cảnh báo CloudWatch dựa trên các số liệu mà Container Insights thu thập.\nTrong lab này, trước tiên chúng ta sẽ kiểm tra xem Container Insights đã được bật trên Amazon ECS Cluster của bạn hay chưa. Nếu Container Insights chưa được bật, chúng ta sẽ sử dụng AWS CLI để bật chúng cho CloudWatch.\nKiểm tra trạng thái của Container Insights cho ECS cluster bằng cách lọc đầu ra AWS CLI từ describe-clusters. Đầu ra từ truy vấn AWS CLI sẽ trả về trạng thái Container Insights để cho biết liệu nó đã được bật hay tắt cho ECS Cluster.\naws ecs describe-clusters --clusters retail-store-ecs-cluster --include SETTINGS --query \u0026#39;clusters[*].settings\u0026#39; Mở rộng nếu Container Insight chưa được bật. Nếu Container Insights chưa được bật, hãy sử dụng lệnh AWS CLI sau để bật Container Insights cho CloudWatch:\naws ecs update-cluster-settings --cluster retail-store-ecs-cluster --settings name=containerInsights,value=enabled Bạn sẽ nhận được đầu ra sau trong dòng lệnh:\n{\r\u0026#34;cluster\u0026#34;: {\r\u0026#34;clusterArn\u0026#34;: \u0026#34;arn:aws:ecs:us-west-2:XXXXXXXXXX:cluster/retail-store-ecs-cluster\u0026#34;,\r\u0026#34;clusterName\u0026#34;: \u0026#34;retail-store-ecs-cluster\u0026#34;,\r\u0026#34;status\u0026#34;: \u0026#34;ACTIVE\u0026#34;,\r\u0026#34;registeredContainerInstancesCount\u0026#34;: 0,\r\u0026#34;runningTasksCount\u0026#34;: 0,\r\u0026#34;pendingTasksCount\u0026#34;: 0,\r\u0026#34;activeServicesCount\u0026#34;: 0,\r\u0026#34;statistics\u0026#34;: [],\r\u0026#34;tags\u0026#34;: [],\r\u0026#34;settings\u0026#34;: [\r{\r\u0026#34;name\u0026#34;: \u0026#34;containerInsights\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;enabled\u0026#34;\r}\r],\r\u0026#34;capacityProviders\u0026#34;: [],\r\u0026#34;defaultCapacityProviderStrategy\u0026#34;: [],\r\u0026#34;attachments\u0026#34;: []\r}\r} "
},
{
	"uri": "//localhost:1313/vi/1-container-insights/1-container-insights-metrics/",
	"title": "Container Insights metrics",
	"tags": [],
	"description": "",
	"content": "CloudWatch Container Insights thu thập các số liệu và nhật ký từ các ứng dụng và dịch vụ vi mô được chứa trong container của bạn. Nó sử dụng một tác nhân CloudWatch được chứa trong container để khám phá và thu thập dữ liệu hiệu suất từ tất cả các container đang chạy trong một cluster. Dữ liệu này sau đó được sử dụng để tạo ra các số liệu tổng hợp ở cấp độ cluster, service và task, bao gồm các số liệu về mức sử dụng tài nguyên cho CPU, bộ nhớ, đĩa và mạng.\nKhi bạn cần các số liệu thống kê thường xuyên về dữ liệu tổng hợp theo thời gian, bạn nên sử dụng các số liệu (metrics) hơn là nhật ký (logs). Các số liệu rất lý tưởng để tạo cảnh báo hoặc biểu đồ trên dashboard.\nKhám phá các số liệu của Container Insights Để khám phá các số liệu, trước tiên hãy mở bảng điều khiển CloudWatch Container Insights:\nMở bảng điều khiển Amazon CloudWatch\rTrong bảng điều khiển CloudWatch, chọn Service: ECS từ menu thả xuống Service và Performance Monitoring từ menu thả xuống thứ hai ở trên cùng. Sau đó, chọn retail-store-ecs-cluster. Cuối cùng, thay đổi ECS Cluster thành ECS Services.\nBạn có thể quan sát nhiều số liệu khác nhau như CPU Utilization (Mức sử dụng CPU), Memory Utilization (Mức sử dụng bộ nhớ), Network RX/TX (Lưu lượng mạng RX/TX), và Ephemeral Storage Utilization (Mức sử dụng bộ nhớ tạm thời). Các số liệu chính này và các dashboard tự động được tạo bởi CloudWatch Container Insights dựa trên retail-store-ecs-cluster. Vì các số liệu này cũng có sẵn trong CloudWatch Metrics, chúng có thể được sử dụng để tạo các dashboard tùy chỉnh.\nCác số liệu của Amazon ECS Container Insights nằm trong namespace ECS/ContainerInsights. Để biết thông tin chi tiết về từng số liệu, vui lòng tham khảo tài liệu tại đây.\nKhám phá bản đồ trực quan của ứng dụng Để xem biểu diễn đồ họa các tài nguyên ECS và mối quan hệ của chúng, hãy nhấp vào View in maps (Xem trên bản đồ) ở menu phía trên bên phải.\nNếu bạn di chuột qua một trong các tài nguyên, bạn có thể xem thêm chi tiết như CPU, memory utilization, network traffic, and disk utilization.\n"
},
{
	"uri": "//localhost:1313/vi/1-container-insights/2-explore-cloudwatch-logs/",
	"title": "Khám phá CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "Hãy xem xét các nhật ký từ các ứng dụng của cluster cửa hàng bán lẻ và kiểm tra các nhật ký liên quan đến hiệu suất của cluster này.\nKhám phá Application Log Chúng tôi đã cấu hình các cài đặt nhật ký cho dịch vụ container UI trong ECS task definition section như sau. Chúng tôi đã sử dụng trình điều khiển awslogs mặc định để thu thập nhật ký từ container và một log group(nhóm nhật ký), đại diện cho một nhóm các log stream (luồng nhật ký) có chung cài đặt về thời gian lưu giữ, giám sát và kiểm soát truy cập.\n\u0026#34;logConfiguration\u0026#34;: {\r\u0026#34;logDriver\u0026#34;: \u0026#34;awslogs\u0026#34;,\r\u0026#34;options\u0026#34;: {\r\u0026#34;awslogs-group\u0026#34;: \u0026#34;retail-store-ecs-tasks\u0026#34;,\r\u0026#34;awslogs-region\u0026#34;: \u0026#34;$AWS_REGION\u0026#34;,\r\u0026#34;awslogs-stream-prefix\u0026#34;: \u0026#34;ui-service\u0026#34;\r}\r} Điều hướng đến menu Log groups (Nhóm nhật ký) trong CloudWatch. Tìm kiếm log group retail-store-ecs-tasks và nhấp vào nó để xem các log stream liên quan đến UI và catalog như hình bên dưới.\nMột log stream (luồng nhật ký) bao gồm một chuỗi các sự kiện nhật ký bắt nguồn từ cùng một nguồn. Mỗi nguồn nhật ký riêng biệt trong CloudWatch Logs tạo thành một log stream riêng của nó.\nChuyển đến Logs Insights để phân tích dữ liệu nhật ký ứng dụng bằng CloudWatch Logs Insights. Chọn retail-store-ecs-tasks cho log group và chạy truy vấn sau. Kết quả là, bạn có thể truy xuất các nhật ký liên quan đến dịch vụ UI. Kết quả sẽ được hiển thị dưới dạng biểu đồ cột các sự kiện nhật ký trong log group này theo thời gian.\nfields @timestamp, @logStream, @message\r| filter @logStream like /catalog-service/\r| sort @timestamp desc\r| limit 10 "
},
{
	"uri": "//localhost:1313/vi/1-container-insights/3-load-testing-ecs-microservices/",
	"title": "Kiểm thử tải các Microservice trên ECS",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ tạo tải giả lập bằng lệnh stress command, một công cụ dòng lệnh dành cho các hệ điều hành dựa trên Linux để tạo tải cho hệ thống. Chúng ta sẽ exec vào task ui và chạy lệnh stress để kích hoạt việc mở rộng (scaling). Sau đó, chúng ta sẽ quan sát các số liệu CloudWatch để thấy hiệu quả của việc mở rộng.\nKết nối đến ECS Task Chạy lệnh sau để chọn một trong các task đang chạy có bật enableExecuteCommand enabled:\nECS_EXEC_TASK_ARN=$(aws ecs list-tasks --cluster retail-store-ecs-cluster \\\r--service-name ui --query \u0026#39;taskArns[]\u0026#39; --output text | \\\rxargs -n1 aws ecs describe-tasks --cluster retail-store-ecs-cluster --tasks | \\\rjq -r \u0026#39;.tasks[] | select(.enableExecuteCommand == true) | .taskArn\u0026#39; | \\\rhead -n 1)\recho $ECS_EXEC_TASK_ARN Lệnh này sẽ xuất ra ARN của task:\narn:aws:ecs:us-west-2:XXXXXXXXXX:task/retail-store-ecs-cluster/0564778486a846599b8bd6b544e5f6eb\nBắt đầu phiên tương tác /bin/bash trong task đang chạy.\nif [ -z ${ECS_EXEC_TASK_ARN} ]; then echo \u0026#34;ECS_EXEC_TASK_ARN is not correctly configured!\u0026#34;; else\raws ecs execute-command --cluster retail-store-ecs-cluster \\\r--task $ECS_EXEC_TASK_ARN \\\r--container application \\\r--interactive \\\r--command \u0026#34;/bin/bash\u0026#34;\rfi Mở rộng (Scaling Up) Đầu tiên, cài đặt lệnh stress:\ndnf install stress -y\nBây giờ, hãy chạy lệnh sau để tạo tải cho 10 lõi CPU với thời gian chờ là 180 giây:\nstress -c 10 --timeout 180\nĐiều hướng đến trang điều khiển Container Insights và chọn khoảng thời gian là 5 phút như hình bên dưới:\nSẽ mất vài phút để các số liệu xuất hiện trong CloudWatch Insights. Để quan sát đỉnh tải (stress spike) theo thời gian thực, hãy bật tự động làm mới (auto-refresh) trong 10 giây trên bảng điều khiển CloudWatch.\nTrên trang điều khiển Container Insights, bạn có thể quan sát thấy mức sử dụng CPU tăng lên khi tải trên dịch vụ ui tăng lên.\nSau khi quan sát hiệu quả của việc mở rộng, hãy kết thúc phiên của bạn:\nexit\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Khả năng quan sát với Amazon ECS",
	"tags": [],
	"description": "",
	"content": "Observability with Amazon ECS Khả năng quan sát là khả năng liên tục tạo và khám phá những thông tin chi tiết hữu ích dựa trên các tín hiệu từ hệ thống đang được theo dõi. Nói cách khác, khả năng quan sát cho phép người dùng hiểu được trạng thái của hệ thống từ các đầu ra bên ngoài của nó và thực hiện các hành động phù hợp. Ba trụ cột của khả năng quan sát là số liệu (metrics), nhật ký (logs) và dấu vết (traces):\nSố liệu (Metrics) Số liệu biểu diễn dữ liệu số được đo lường theo các khoảng thời gian. Chúng tận dụng mô hình hóa và dự đoán toán học để hiểu hành vi của hệ thống ở cả hiện tại và tương lai. Chúng hữu ích để xác định xu hướng và cho phép mô hình hóa và dự đoán toán học. Nhật ký (Logs) Nhật ký bao gồm các bản ghi được đánh dấu thời gian, bất biến, ghi lại các sự kiện rời rạc khi chúng xảy ra theo thời gian. Chúng có giá trị trong việc phát hiện các hành vi mới nổi và khó lường. Chúng đặc biệt hữu ích để khám phá các mô hình hành vi mới nổi và khó lường. Dấu vết (Traces) Dấu vết mô tả một chuỗi các sự kiện phân tán, liên kết với nhau, vạch ra hành trình đầu cuối của một yêu cầu thông qua một hệ thống phân tán. Chúng cung cấp thông tin chi tiết, chẳng hạn như độ trễ, về đường đi của một yêu cầu và cấu trúc của nó. Chúng cung cấp khả năng hiển thị cả đường đi mà một yêu cầu đã đi qua cũng như cấu trúc của một yêu cầu. Tóm lại, chúng ta có thể chia khả năng quan sát thành ba thành phần chính: CloudWatch Metrics, CloudWatch Logs và AWS X-Ray. Cùng nhau, chúng tạo thành một giải pháp khả năng quan sát toàn diện trên AWS, bao gồm giám sát số liệu, quản lý nhật ký và theo dõi phân tán. Các trụ cột này phối hợp với nhau để cung cấp cho người dùng những hiểu biết sâu sắc về hành vi, hiệu suất và độ tin cậy của môi trường và ứng dụng AWS của họ.\n"
},
{
	"uri": "//localhost:1313/vi/2-open-telemetry/1-opentelemetry-components/",
	"title": " Các thành phần của OpenTelemetry",
	"tags": [],
	"description": "",
	"content": "OpenTelemetry Collector OpenTelemetry Collector là một thành phần đa năng được thiết kế để xuất dữ liệu telemetry đến nhiều đích khác nhau, bao gồm Prometheus, AWS X-Ray và Amazon CloudWatch. AWS Distro for OpenTelemetry Collector đại diện cho bản phân phối được AWS hỗ trợ của OpenTelemetry Collector thượng nguồn. Thành phần được AWS duy trì này đảm bảo tích hợp đáng tin cậy với Amazon CloudWatch và nhiều backend được hỗ trợ khác, bao gồm các giải pháp ISV đối tác.\nTham khảo tài liệu của chúng tôi để tìm hiểu về các exporter khác nhau được hỗ trợ trong AWS Distro for OpenTelemetry.\nOpenTelemetry Collector có thể được triển khai bằng nhiều mẫu khác nhau để phù hợp với yêu cầu kiến trúc của bạn:\nSidecar Pattern: Triển khai collector cùng với ứng dụng của bạn trên cùng một host, cho phép thu thập và xuất dữ liệu telemetry cục bộ.\nECS Service Pattern: Hoạt động như một dịch vụ collector tập trung, hợp nhất dữ liệu telemetry từ nhiều node ứng dụng. Để biết thông tin toàn diện về các mẫu triển khai và cấu hình, hãy tham khảo blog AWS về deployment patterns.\nOpenTelemetry Protocol Giao thức OpenTelemetry (OTLP) đóng vai trò là một đặc tả trung lập với nhà cung cấp để truyền dấu vết, số liệu và nhật ký. Nó cho phép chuyển đổi backend liền mạch bằng cách chỉ yêu cầu điều chỉnh cấu hình trên collector. OTLP thiết lập các cơ chế mã hóa, vận chuyển và phân phối dữ liệu tiêu chuẩn, đảm bảo khả năng tương thích trong tương lai và tích hợp đơn giản.\nĐể hiểu sâu hơn về các thành phần của OpenTelemetry, hãy tham khảo toàn bộ đặc tả. Bạn có thể tìm thấy đặc tả toàn diện về components của OpenTelemetry..\nĐo đạc (Instrumentation) OpenTelemetry cung cấp hỗ trợ rộng rãi cho việc tạo dữ liệu telemetry trên nhiều thư viện và framework khác nhau. Nó cho phép cả phương pháp đo đạc tự động và đo đạc thủ công để thu thập dữ liệu observability chi tiết:\nĐo đạc tự động (Auto-Instrumentation): Thu thập dữ liệu telemetry tự động, bao gồm dấu vết, số liệu và nhật ký, mà không yêu cầu sửa đổi mã ứng dụng của bạn. Phương pháp này cung cấp tích hợp nhanh chóng với các thư viện và framework phổ biến, cho phép quan sát các yêu cầu HTTP và các hoạt động khác với cấu hình tối thiểu.\nĐo đạc thủ công (Manual Instrumentation): Cung cấp khả năng kiểm soát chi tiết thông qua tích hợp trực tiếp các SDK OpenTelemetry vào codebase của bạn. Phương pháp này cho phép tạo các span, số liệu và nhật ký tùy chỉnh, mang lại sự linh hoạt để giám sát các hành vi cụ thể của ứng dụng và các đặc điểm hiệu suất chi tiết.\nCác phương pháp bổ sung này có thể được kết hợp hiệu quả để giám sát các ứng dụng trên AWS App Runner, AWS Lambda, EC2, ECS, EKS trên EC2, AWS Fargate và các môi trường hybrid hoặc tại chỗ. Trong khi đo đạc tự động cung cấp phạm vi bao phủ toàn diện, đo đạc thủ công cho phép thu thập dữ liệu telemetry chuyên biệt.\nTham khảo specification của OpenTelemetry để tìm hiểu thêm.\n"
},
{
	"uri": "//localhost:1313/vi/2-open-telemetry/2-adot-collector-components/",
	"title": "Các thành phần của ADOT Collector",
	"tags": [],
	"description": "",
	"content": "Trong workshop này, chúng ta sẽ triển khai AWS Distro for OpenTelemetry Collector (ADOT Collector) như một sidecar container trong Amazon ECS. Các ứng dụng bán lẻ của chúng ta, chạy trong cùng một task Amazon ECS, sẽ được cấu hình để gửi dữ liệu giám sát đến ADOT Collector.\nCác Chính sách Cần thiết cho ADOT Collector Để vận hành ADOT Collector trên Amazon ECS một cách hiệu quả, các quyền IAM cụ thể phải được đính kèm vào vai trò task ECS của bạn. Các quyền này cho phép ADOT Collector thu thập và truyền nhật ký, dấu vết và số liệu đến các dịch vụ AWS khác nhau bao gồm CloudWatch, X-Ray và các dịch vụ khác.\nHãy bắt đầu bằng cách tạo chính sách IAM cho OpenTelemetry Collector. Chính sách này cấp các quyền cần thiết cho việc thu thập telemetry toàn diện.\naws iam create-policy \\\r--policy-name AWSOpenTelemetryPolicy \\\r--policy-document \u0026#39;{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;logs:PutLogEvents\u0026#34;,\r\u0026#34;logs:CreateLogGroup\u0026#34;,\r\u0026#34;logs:CreateLogStream\u0026#34;,\r\u0026#34;logs:DescribeLogStreams\u0026#34;,\r\u0026#34;logs:DescribeLogGroups\u0026#34;,\r\u0026#34;logs:PutRetentionPolicy\u0026#34;,\r\u0026#34;xray:PutTraceSegments\u0026#34;,\r\u0026#34;xray:PutTelemetryRecords\u0026#34;,\r\u0026#34;xray:GetSamplingRules\u0026#34;,\r\u0026#34;xray:GetSamplingTargets\u0026#34;,\r\u0026#34;xray:GetSamplingStatisticSummaries\u0026#34;,\r\u0026#34;cloudwatch:PutMetricData\u0026#34;,\r\u0026#34;ec2:DescribeVolumes\u0026#34;,\r\u0026#34;ec2:DescribeTags\u0026#34;,\r\u0026#34;ssm:GetParameters\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r}\u0026#39;\raws iam attach-role-policy \\\r--role-name retailStoreEcsTaskRole \\\r--policy-arn arn:aws:iam::$ACCOUNT_ID:policy/AWSOpenTelemetryPolicy Tìm hiểu về Cấu hình ADOT Mặc định Cấu hình ADOT Collector chỉ định cách dữ liệu telemetry (nhật ký, dấu vết và số liệu) được xử lý và xuất. AWS cung cấp một cấu hình mặc định được tối ưu hóa cho môi trường Amazon ECS. Bạn có thể xem xét cấu hình mặc định hoàn chỉnh tại đây.\nPhân tích Cấu hình Extensions: Extension health_check cho phép giám sát trạng thái hoạt động của collector.\nextensions:\rhealth_check: Receivers: Receiver otlp được cấu hình để chấp nhận dữ liệu telemetry thông qua cả giao thức gRPC và HTTP trên các endpoint được chỉ định.\nreceivers:\rotlp:\rprotocols:\rgrpc:\rendpoint: 0.0.0.0:4317\rhttp:\rendpoint: 0.0.0.0:4318 Processors: Cấu hình bao gồm một số processor:\nbatch/traces và batch/metrics xử lý việc gom nhóm dữ liệu dấu vết và số liệu resourcedetection tự động xác định các thuộc tính tài nguyên từ môi trường, ECS và các nguồn EC2 resource quản lý các thuộc tính tài nguyên thông qua các hoạt động thiết lập và xóa processors:\rbatch/traces:\rtimeout: 1s\rsend_batch_size: 50\rbatch/metrics:\rtimeout: 60s\rresourcedetection:\rdetectors:\r- env\r- ecs\r- ec2\rresource:\rattributes:\r- key: TaskDefinitionFamily\rfrom_attribute: aws.ecs.task.family\raction: insert\r- key: aws.ecs.task.family\raction: delete\r- key: InstanceId\rfrom_attribute: host.id\raction: insert\r- key: host.id\raction: delete\r- key: TaskARN\rfrom_attribute: aws.ecs.task.arn\raction: insert\r- key: aws.ecs.task.arn\raction: delete\r- key: TaskDefinitionRevision\rfrom_attribute: aws.ecs.task.revision\raction: insert\r- key: aws.ecs.task.revision\raction: delete\r- key: LaunchType\rfrom_attribute: aws.ecs.launchtype\raction: insert\r- key: aws.ecs.launchtype\raction: delete\r- key: ClusterARN\rfrom_attribute: aws.ecs.cluster.arn\raction: insert\r- key: aws.ecs.cluster.arn\raction: delete\r- key: cloud.provider\raction: delete\r- key: cloud.platform\raction: delete\r- key: cloud.account.id\raction: delete\r- key: cloud.region\raction: delete\r- key: cloud.availability_zone\raction: delete\r- key: aws.log.group.names\raction: delete\r- key: aws.log.group.arns\raction: delete\r- key: aws.log.stream.names\raction: delete\r- key: host.image.id\raction: delete\r- key: host.name\raction: delete\r- key: host.type\raction: delete Exporters: Cấu hình định nghĩa hai exporter:\nawsxray để truyền dữ liệu dấu vết đến AWS X-Ray awsemf/application để gửi số liệu đến Amazon CloudWatch với các cài đặt log group và namespace cụ thể exporters:\rawsxray:\rawsemf/application:\rnamespace: ECS/AWSOTel/Application\rlog_group_name: \u0026#39;/aws/ecs/application/metrics\u0026#39;\rdimension_rollup_option: NoDimensionRollup\rresource_to_telemetry_conversion:\renabled: true Services: Cấu hình thiết lập hai pipeline chính:\nMột traces pipeline để xử lý và xuất dữ liệu dấu vết Một metrics/application để xử lý số liệu Cả hai pipeline đều tích hợp với extension health_check để giám sát trạng thái của collector.\nservice:\rpipelines:\rtraces:\rreceivers: [otlp]\rprocessors: [resourcedetection, batch/traces]\rexporters: [awsxray]\rmetrics/application:\rreceivers: [otlp]\rprocessors: [resourcedetection, resource, batch/metrics]\rexporters: [awsemf/application]\rextensions: [health_check] "
},
{
	"uri": "//localhost:1313/vi/2-open-telemetry/3-instrumentation/",
	"title": "Đo đạc",
	"tags": [],
	"description": "",
	"content": "\nTriển khai Tự động Đo đạc (Injecting Auto-instrumentation) AWS Distro for OpenTelemetry (ADOT) cung cấp khả năng tự động đo đạc cho nhiều ngôn ngữ lập trình, bao gồm các dịch vụ .NET, Java, Node.js, Python và Go đang chạy trên Amazon ECS. Với ADOT, bạn có thể tạo dấu vết và số liệu mà không cần sửa đổi mã ứng dụng của mình.\nKhi bạn tích hợp ADOT với các task ECS của mình, bạn có được khả năng thu thập metadata từ các tài nguyên và dịch vụ được quản lý của AWS. Việc tích hợp này cho phép bạn tương quan dữ liệu hiệu suất ứng dụng với các số liệu cơ sở hạ tầng, giúp giảm thời gian trung bình để giải quyết vấn đề.\nTự động Đo đạc Ứng dụng UI Java Trong phần này, chúng ta sẽ trình diễn khả năng tự động đo đạc bằng cách tập trung vào ứng dụng UI dựa trên Java của chúng ta với OpenTelemetry agent. Mặc dù các thành phần khác trong ứng dụng của chúng ta - catalog (viết bằng Golang), cart (Java) và checkout (Node.js) - cũng có thể được tự động đo đạc, chúng ta sẽ sử dụng ví dụ duy nhất này để minh họa các nguyên tắc của OpenTelemetry và tự động đo đạc.\nĐể bật OpenTelemetry agent cho một ứng dụng Java, bạn cần chỉ định flag \u0026ndash;javaagent khi khởi động hoặc đặt nó làm một biến môi trường. Ngoài ra, hầu hết các hệ thống theo dõi (tracing) đều yêu cầu một tên dịch vụ để xác định ứng dụng của bạn. Bạn có thể xác định điều này bằng cách sử dụng biến môi trường OTEL_RESOURCE_ATTRIBUTES với khóa thuộc tính service.name .\nCấu hình OpenTelemetry Java Agent Bảng sau đây phác thảo các biến môi trường chính được sử dụng để cấu hình OpenTelemetry Java agent:\nBiến Môi Trường Mô Tả JAVA_TOOL_OPTIONS Chỉ định đường dẫn đến Java agent. Điều này hướng dẫn JVM tải OpenTelemetry agent khi khởi động ứng dụng. OTEL_SERVICE_NAME Đặt tên dịch vụ để xác định ứng dụng của bạn. Tên này được sử dụng để liên kết các dấu vết của ứng dụng với dịch vụ của nó. OTEL_EXPORTER_OTLP_INSECURE Cấu hình agent sử dụng kết nối không an toàn (ví dụ: không có TLS). Điều này được sử dụng để giao tiếp với OpenTelemetry Collector. OTEL_JAVAAGENT_ENABLED OpenTelemetry Java agent. Biến này phải được đặt thành true để kích hoạt agent cho việc thu thập dấu vết và số liệu. Để triển khai ADOT collector dưới dạng sidecar, chúng ta sẽ tạo một revision mới của định nghĩa task và cập nhật service để sử dụng phiên bản mới nhất này.\nĐầu tiên, chúng ta sẽ đăng ký định nghĩa task mới:\naws ecs register-task-definition --cli-input-json \u0026#34;$(echo \u0026#39;{\r\u0026#34;family\u0026#34;: \u0026#34;retail-store-ecs-ui\u0026#34;,\r\u0026#34;executionRoleArn\u0026#34;: \u0026#34;arn:aws:iam::\u0026#39;\u0026#34;$ACCOUNT_ID\u0026#34;\u0026#39;:role/retailStoreEcsTaskExecutionRole\u0026#34;,\r\u0026#34;taskRoleArn\u0026#34;: \u0026#34;arn:aws:iam::\u0026#39;\u0026#34;$ACCOUNT_ID\u0026#34;\u0026#39;:role/retailStoreEcsTaskRole\u0026#34;,\r\u0026#34;networkMode\u0026#34;: \u0026#34;awsvpc\u0026#34;,\r\u0026#34;requiresCompatibilities\u0026#34;: [\u0026#34;FARGATE\u0026#34;],\r\u0026#34;cpu\u0026#34;: \u0026#34;1024\u0026#34;,\r\u0026#34;memory\u0026#34;: \u0026#34;2048\u0026#34;,\r\u0026#34;runtimePlatform\u0026#34;: {\r\u0026#34;cpuArchitecture\u0026#34;: \u0026#34;X86_64\u0026#34;,\r\u0026#34;operatingSystemFamily\u0026#34;: \u0026#34;LINUX\u0026#34;\r},\r\u0026#34;containerDefinitions\u0026#34;: [\r{\r\u0026#34;name\u0026#34;: \u0026#34;application\u0026#34;,\r\u0026#34;image\u0026#34;: \u0026#34;public.ecr.aws/aws-containers/retail-store-sample-ui:0.7.0\u0026#34;,\r\u0026#34;portMappings\u0026#34;: [\r{\r\u0026#34;name\u0026#34;: \u0026#34;application\u0026#34;,\r\u0026#34;containerPort\u0026#34;: 8080,\r\u0026#34;hostPort\u0026#34;: 8080,\r\u0026#34;protocol\u0026#34;: \u0026#34;tcp\u0026#34;,\r\u0026#34;appProtocol\u0026#34;: \u0026#34;http\u0026#34;\r}\r],\r\u0026#34;essential\u0026#34;: true,\r\u0026#34;linuxParameters\u0026#34;: {\r\u0026#34;initProcessEnabled\u0026#34;: true\r},\r\u0026#34;environment\u0026#34;: [\r{\r\u0026#34;name\u0026#34;: \u0026#34;JAVA_TOOL_OPTIONS\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;-javaagent:/opt/aws-opentelemetry-agent.jar\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;OTEL_JAVAAGENT_ENABLED\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;true\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;OTEL_EXPORTER_OTLP_ENDPOINT\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;http://localhost:4317\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;OTEL_EXPORTER_OTLP_INSECURE\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;true\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;OTEL_SERVICE_NAME\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;ui-application\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;OTEL_TRACES_EXPORTER\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;otlp\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;OTEL_METRICS_EXPORTER\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;otlp\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;OTEL_LOGS_EXPORTER\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;none\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;ENDPOINTS_CATALOG\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;http://catalog\u0026#34;\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;ENDPOINTS_ASSETS\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;http://assets\u0026#34;\r}\r],\r\u0026#34;healthCheck\u0026#34;: {\r\u0026#34;command\u0026#34;: [\r\u0026#34;CMD-SHELL\u0026#34;,\r\u0026#34;curl -f http://localhost:8080/actuator/health || exit 1\u0026#34;\r],\r\u0026#34;interval\u0026#34;: 10,\r\u0026#34;timeout\u0026#34;: 5,\r\u0026#34;retries\u0026#34;: 3,\r\u0026#34;startPeriod\u0026#34;: 60\r},\r\u0026#34;logConfiguration\u0026#34;: {\r\u0026#34;logDriver\u0026#34;: \u0026#34;awslogs\u0026#34;,\r\u0026#34;options\u0026#34;: {\r\u0026#34;awslogs-group\u0026#34;: \u0026#34;retail-store-ecs-tasks\u0026#34;,\r\u0026#34;awslogs-region\u0026#34;: \u0026#34;\u0026#39;\u0026#34;$AWS_REGION\u0026#34;\u0026#39;\u0026#34;,\r\u0026#34;awslogs-stream-prefix\u0026#34;: \u0026#34;ui-service\u0026#34;\r}\r}\r},\r{\r\u0026#34;name\u0026#34;: \u0026#34;aws-otel-collector\u0026#34;,\r\u0026#34;image\u0026#34;: \u0026#34;public.ecr.aws/aws-observability/aws-otel-collector:latest\u0026#34;,\r\u0026#34;essential\u0026#34;: true,\r\u0026#34;portMappings\u0026#34;: [\r{\r\u0026#34;containerPort\u0026#34;: 4317,\r\u0026#34;hostPort\u0026#34;: 4317,\r\u0026#34;protocol\u0026#34;: \u0026#34;tcp\u0026#34;\r}\r],\r\u0026#34;command\u0026#34;: [\r\u0026#34;--config=/etc/ecs/ecs-cloudwatch-xray.yaml\u0026#34;\r],\r\u0026#34;logConfiguration\u0026#34;: {\r\u0026#34;logDriver\u0026#34;: \u0026#34;awslogs\u0026#34;,\r\u0026#34;options\u0026#34;: {\r\u0026#34;awslogs-group\u0026#34;: \u0026#34;retail-store-ecs-tasks\u0026#34;,\r\u0026#34;awslogs-region\u0026#34;: \u0026#34;\u0026#39;\u0026#34;$AWS_REGION\u0026#34;\u0026#39;\u0026#34;,\r\u0026#34;awslogs-stream-prefix\u0026#34;: \u0026#34;aws-otel-collector\u0026#34;,\r\u0026#34;awslogs-create-group\u0026#34;: \u0026#34;True\u0026#34;\r}\r}\r}\r]\r}\u0026#39;)\u0026#34; Tiếp theo, chúng ta sẽ cập nhật ECS service cho dịch vụ ui để sử dụng revision định nghĩa task mới (mất khoảng 5 phút):\naws ecs update-service --cluster retail-store-ecs-cluster --service ui --task-definition retail-store-ecs-ui\raws ecs wait services-stable --cluster retail-store-ecs-cluster --services ui Sau khi cập nhật service, các task hiện bao gồm sidecar aws-otel-collector:\n"
},
{
	"uri": "//localhost:1313/vi/2-open-telemetry/",
	"title": "OpenTelemetry",
	"tags": [],
	"description": "",
	"content": "\rĐiều kiện tiên quyết: Hoàn thành chương Fundamentals \u0026amp; ECS Service Connect trước khi bắt đầu lab này.\nOpenTelemetry là gì? OpenTelemetry là một tập hợp toàn diện các API, SDK và công cụ được thiết kế để đo đạc, tạo, thu thập và xuất dữ liệu telemetry (số liệu, nhật ký và dấu vết). Dữ liệu này giúp bạn phân tích chi tiết hiệu suất và hành vi của phần mềm. Bằng cách cung cấp một phương pháp tiêu chuẩn để thu thập và truyền dữ liệu trên nhiều dịch vụ và ứng dụng khác nhau, OpenTelemetry cho phép bạn hiểu sâu hơn về hoạt động của hệ thống.\nAWS Distro for OpenTelemetry AWS Distro for OpenTelemetry (ADOT) là một bản phân phối an toàn, sẵn sàng cho môi trường production và được AWS hỗ trợ của dự án OpenTelemetry thuộc Cloud Native Computing Foundation (CNCF).\nADOT cho phép bạn đo đạc ứng dụng của mình chỉ một lần trong khi gửi các nhật ký, số liệu và dấu vết tương quan đến nhiều backend observability. Các backend này có thể bao gồm:\nAmazon Managed Service for Prometheus Amazon CloudWatch AWS X-Ray Amazon OpenSearch Bất kỳ backend tuân thủ OpenTelemetry Protocol (OTLP) nào Amazon Managed Streaming for Apache Kafka (MSK) Trong hướng dẫn này, bạn sẽ học cách triển khai OpenTelemetry trong môi trường AWS của mình thông qua các bước sau:\nTriển khai OpenTelemetry Collector (ADOT Collector) dưới dạng một sidecar container trên Amazon ECS với Fargate Đo đạc mã ứng dụng để thu thập dấu vết và nhật ký bằng OpenTelemetry Phân tích các dấu vết và nhật ký đã thu thập trong bảng điều khiển AWS "
},
{
	"uri": "//localhost:1313/vi/2-open-telemetry/4-viewing-otel-metrics-and-traces/",
	"title": "Xem Metrics và Traces Otel",
	"tags": [],
	"description": "",
	"content": "Xác minh Traces và Metrics Hãy xác minh thiết lập giám sát của bạn bằng cách truy cập ứng dụng thông qua AWS Load Balancer. Đầu tiên, lấy tên DNS của Load Balancer và sử dụng nó để tạo lưu lượng truy cập thử nghiệm đến ứng dụng của bạn.\nRETAIL_ALB=$(aws elbv2 describe-load-balancers --name retail-store-ecs-ui \\\r--query \u0026#39;LoadBalancers[0].DNSName\u0026#39; --output text)\recho ${RETAIL_ALB} Sử dụng tên DNS hiển thị ở trên để truy cập ứng dụng của bạn trong trình duyệt web. Để tạo các dấu vết có ý nghĩa:\nNhấp vào từng sản phẩm để xem chi tiết của chúng Mở Catalog Duyệt qua các danh mục sản phẩm khác nhau Nếu thành phần giỏ hàng chưa được triển khai sau Security Lab, tránh thêm các mặt hàng vào giỏ hàng.\nCác hành động này sẽ tạo ra các dấu vết cho các dịch vụ UI, Catalog và Assets. Nếu bạn không thấy dấu vết cho tất cả các dịch vụ ngay lập tức, hãy đợi vài phút và làm mới bảng điều khiển CloudWatch, vì có thể có một chút chậm trễ trong quá trình xử lý dữ liệu.\nĐể xem xét dữ liệu dấu vết, số liệu và nhật ký, hãy điều hướng đến bảng điều khiển CloudWatch bằng liên kết bên dưới.\nMở bảng điều khiển Amazon CloudWatch\rKiểm tra AWS X-Ray Trace Map Trong CloudWatch, hãy chuyển đến X-Ray traces và chọn Trace map. Bạn sẽ thấy một bản đồ dịch vụ tương tự như hình bên dưới.\nBản đồ Dấu vết hiển thị các mối quan hệ và tương tác giữa các microservice và thành phần của bạn. Hình ảnh trực quan này giúp bạn hiểu cách các yêu cầu luồng qua kiến trúc ứng dụng của bạn. Bạn sẽ nhận thấy tên ui-application trong bản đồ dấu vết, tương ứng với OTEL_SERVICE_NAME mà chúng ta đã cấu hình trước đó.\nBên dưới Trace Map là Segment Timeline, hiển thị các Segments khác nhau mà trace chứa.\nĐể tìm hiểu thêm về các khái niệm và khả năng của AWS X-Ray, hãy truy cập tài liệu về AWS X-Ray..\nXem Metrics trong CloudWatch CloudWatch Metrics cho phép bạn giám sát hiệu suất của ứng dụng Java đã được đo đạc thông qua nhiều số liệu OpenTelemetry khác nhau. Chúng bao gồm mức sử dụng bộ nhớ JVM, số lượng thread và thống kê thu gom rác, rất cần thiết để giám sát tình trạng ứng dụng và tối ưu hóa việc sử dụng tài nguyên.\nĐể xem xét số liệu về số lượng thread:\nĐiều hướng đến All Metrics từ thanh bên trái trong** Metrics** Chọn namespace tùy chỉnh ECS/AWSOTel/Application Tìm kiếm số liệu process.runtime.jvm.threads.count Xem EMF Logs trong CloudWatch Logs Cấu hình AWS Distro for OpenTelemetry (ADOT) sử dụng Embedded Metric Format (EMF) làm exporter, tự động chuyển đổi các số liệu ứng dụng của bạn thành số liệu CloudWatch. Các số đo này cũng có sẵn dưới dạng nhật ký trong CloudWatch Logs, cung cấp thêm ngữ cảnh cho hiệu suất ứng dụng của bạn.\nĐể xem xét cấu trúc của một mục nhật ký EMF:\nĐiều hướng đến Log groups từ thanh bên trái trong Logs Tìm Log Group /aws/ecs/application/metrics Nhấp vào Log Group để khám phá các log stream Tìm kiếm các Mục Log Cụ thể Để tìm các mục nhật ký liên quan đến số liệu thread JVM:\nChọn Logs Insights từ thanh bên trái trong Logs Chọn log group /aws/ecs/application/metrics Nhập và chạy truy vấn sau để lọc các số liệu thread JVM: fields @timestamp, @message, @logStream, @log\r| filter @message like /jvm\\.threads/\r| sort @timestamp desc\r| limit 10 Tìm hiểu về EMF Log Metrics Kết quả truy vấn sẽ hiển thị các số liệu ở định dạng nhật ký, bao gồm các dimension và thông tin sự kiện AWS. Các thành phần chính bao gồm:\nNamespace: Một chuỗi đại diện cho namespace CloudWatch của số liệu Dimensions: Một mảng các DimensionSet Metrics: Một mảng các đối tượng MetricDefinition objects Để biết chi tiết toàn diện về định dạng EMF, hãy tham khảo Đặc tả Định dạng Số liệu Nhúng CloudWatch.\n"
},
{
	"uri": "//localhost:1313/vi/3-clean-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "// TODO: Phần cleanup này sẽ làm sau khi hoàn thành \u0026amp; xóa các bài lab\n"
},
{
	"uri": "//localhost:1313/vi/4-conclusion/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Tóm lại, khả năng quan sát đóng vai trò là một năng lực quan trọng đối với các hệ thống hiện đại và phức tạp. Nó trao quyền cho chúng ta vượt xa việc giám sát đơn thuần bằng cách liên tục tạo ra và cho phép khám phá các thông tin chi tiết hữu ích có được từ các tín hiệu hệ thống. Điều này cho phép hiểu sâu sắc về trạng thái bên trong của hệ thống thông qua các biểu hiện bên ngoài của nó, tạo điều kiện cho các can thiệp sáng suốt và kịp thời.\nBa trụ cột nền tảng của khả năng quan sát – số liệu (metrics), nhật ký (logs) và dấu vết (traces) – mỗi trụ cột đóng góp một cách độc đáo vào sự hiểu biết này:\nMetrics cung cấp dữ liệu định lượng theo chuỗi thời gian, rất cần thiết cho việc xác định xu hướng, lập kế hoạch dung lượng và phân tích dự đoán. Logs cung cấp các bản ghi bất biến, được đánh dấu thời gian về các sự kiện rời rạc, chứng tỏ vô giá trong việc chẩn đoán các hành vi mới nổi và khó lường. Traces map the end-to-end journey của các yêu cầu trên các hệ thống phân tán, tiết lộ các điểm nghẽn về độ trễ và luồng hoạt động phức tạp. Trên nền tảng AWS, các trụ cột này được giải quyết một cách toàn diện thông qua CloudWatch Metrics, CloudWatch Logs và AWS X-Ray. Hoạt động đồng bộ, các dịch vụ này tạo thành một giải pháp khả năng quan sát mạnh mẽ, cung cấp khả năng hiển thị sâu sắc về hành vi, hiệu suất và độ tin cậy tổng thể của môi trường AWS và các ứng dụng mà chúng lưu trữ. Bằng cách tận dụng hiệu quả các công cụ này, người dùng có thể chủ động quản lý hệ thống của mình, tối ưu hóa hiệu suất và đảm bảo một bối cảnh vận hành linh hoạt và đáng tin cậy.\nCác Bước Tiếp Theo Tiếp tục hành trình học tập Amazon ECS của bạn bằng cách khám phá các module workshop chuyên biệt sau:\nAuto Scaling - Tìm hiểu cách tự động điều chỉnh quy mô ứng dụng của bạn một cách linh hoạt Networking - Nắm vững các khái niệm và cách triển khai mạng trong ECS Observability - Triển khai các giải pháp giám sát toàn diện Security - Triển khai các biện pháp kiểm soát bảo mật mạnh mẽ và các phương pháp hay nhất Automation - Tối ưu hóa quy trình triển khai Storage - Tích hợp Amazon EFS cho lưu trữ bền bỉ Mỗi module cung cấp trải nghiệm thực hành chi tiết để giúp bạn xây dựng các ứng dụng ECS sẵn sàng cho môi trường production.\nNgười đóng góp Lê Minh Nghĩa - https://www.linkedin.com/in/minhnghia2k3/\nTrần Đoàn Công Lý - https://www.linkedin.com/in/trandoancongly/\nTài liệu tham khảo Container Insights OpenTelemetry "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]