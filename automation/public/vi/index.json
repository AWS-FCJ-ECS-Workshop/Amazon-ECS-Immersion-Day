[
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "\rĐiều kiện tiên quyết: Hoàn thành chương Cơ bản trước khi bắt đầu lab này.\nTriển khai Rolling của ECS là gì? Triển khai Rolling là một chiến lược triển khai thay thế dần các phiên bản cũ của ứng dụng bằng các phiên bản mới, giảm thiểu thời gian ngừng hoạt động và đảm bảo tính khả dụng liên tục của dịch vụ.\nKhi sử dụng kiểu triển khai cập nhật rolling trong Amazon ECS, nền tảng sẽ thay thế các tác vụ đang chạy bằng các tác vụ mới dựa trên cấu hình dịch vụ bạn đã xác định. Hành vi này được kiểm soát bởi hai tham số chính:\nminimumHealthyPercent: Số lượng tác vụ tối thiểu phải ở trạng thái RUNNING trong quá trình triển khai.\nmaximumPercent: Số lượng tác vụ tối đa (ở trạng thái RUNNING hoặc PENDING) được phép trong quá trình triển khai.\nVí dụ Nếu số lượng tác vụ mong muốn của bạn là 4:\nVới minimumHealthyPercent = 50, ECS có thể dừng tối đa 2 tác vụ cùng một lúc trước khi bắt đầu các tác vụ mới.\nVới maximumPercent = 200, ECS có thể bắt đầu tối đa 4 tác vụ mới trước khi dừng các tác vụ cũ.\nTốc độ triển khai phụ thuộc vào các giá trị của minimumHealthyPercent và maximumPercent. Nếu dịch vụ ECS của bạn được tích hợp với Application Load Balancer (ALB), các cài đặt kiểm tra sức khỏe cũng ảnh hưởng đến thời gian triển khai. Để biết các mẹo về tối ưu hóa tốc độ triển khai, hãy tham khảo: bài đăng này về cách tăng tốc độ triển khai container Amazon ECS.\nTriển khai Rolling của ECS với AWS CodePipeline Bạn có thể tự động hóa việc triển khai rolling lên ECS bằng AWS CodePipeline. Dưới đây là hướng dẫn từng bước để thiết lập:\nXác định Task Definition và Service ECS của bạn\nBắt đầu bằng cách xác định task definition và service ECS của bạn:\nChỉ định image container, giới hạn tài nguyên, mạng và cài đặt môi trường.\nĐịnh cấu hình các tùy chọn cấp dịch vụ như số lượng tác vụ mong muốn và cân bằng tải.\nThiết lập AWS CodePipeline của bạn\nTạo một pipeline với các stage sau:\nSource (Nguồn)\nBuild (Xây dựng)\nDeploy (Triển khai)\nSource Stage (Giai đoạn Nguồn)\nĐịnh cấu hình CodePipeline để kết nối với kho lưu trữ mã nguồn của bạn (ví dụ: GitHub, AWS CodeCommit).\nMỗi khi phát hiện thấy thay đổi mã, pipeline sẽ tự động kích hoạt một quy trình triển khai mới.\nBuild Stage (Giai đoạn Xây dựng)\nSử dụng AWS CodeBuild (hoặc một công cụ xây dựng khác) để:\nBiên dịch mã của bạn\nChạy các thử nghiệm tự động (tùy chọn)\nXây dựng và gắn thẻ Docker image của bạn\nĐẩy image lên Amazon ECR (Elastic Container Registry)\nDeploy Stage (Giai đoạn Triển khai)\nSử dụng AWS CodeDeploy để quản lý việc triển khai rolling:\nLiên kết CodeDeploy với dịch vụ ECS của bạn\nĐịnh cấu hình một deployment group với các cài đặt cập nhật rolling (ví dụ: minimumHealthyPercent, maximumPercent)\nCodeDeploy sẽ xử lý việc thay thế tác vụ và đảm bảo lưu lượng truy cập được định tuyến chính xác thông qua load balancer.\nTesting \u0026amp; Approval (Thử nghiệm \u0026amp; Phê duyệt) (Tùy chọn)\nThêm các stage bổ sung để tăng cường khả năng kiểm soát và chất lượng:\nChạy các thử nghiệm tích hợp hoặc smoke test sau khi triển khai\nThêm các bước phê duyệt thủ công để yêu cầu sự kiểm tra của con người trước khi quá trình triển khai tiếp tục.\nMonitoring \u0026amp; Rollback (Giám sát \u0026amp; Khôi phục)\nBật tính năng giám sát và cảnh báo để có khả năng hiển thị theo thời gian thực:\nSử dụng CloudWatch Logs, ECS Service Events và CloudWatch Alarms\nNếu phát hiện sự cố, CodeDeploy có thể tự động khôi phục về phiên bản hoạt động trước đó.\nContinuous Improvement (Cải tiến Liên tục)\nSau mỗi lần triển khai:\nXem xét các số liệu, nhật ký và phản hồi\nXác định các nút thắt hoặc lỗi\nLặp lại và cải thiện chiến lược triển khai của bạn\nBằng cách tuân theo phương pháp có cấu trúc này, bạn có thể xây dựng một pipeline triển khai rolling tự động, đáng tin cậy bằng cách sử dụng AWS CodePipeline và Amazon ECS. Thiết lập này cho phép bạn triển khai các bản cập nhật một cách an toàn, giảm rủi ro và duy trì tính khả dụng cao với nỗ lực tối thiểu.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Tự động hóa với Amazon ECS",
	"tags": [],
	"description": "",
	"content": "Tự động hóa với Amazon ECS Trong chương này, chúng ta sẽ khám phá cách tự động hóa việc triển khai các ứng dụng container hóa lên Amazon ECS bằng cách sử dụng AWS CodePipeline. Việc tự động hóa quy trình này giúp đơn giản hóa việc phân phối ứng dụng, giảm thiểu sự can thiệp thủ công và đảm bảo các bản phát hành phần mềm nhanh hơn và đáng tin cậy hơn.\nAWS CodePipeline với Amazon ECS AWS CodePipeline là một dịch vụ Tích hợp Liên tục và Phân phối Liên tục (CI/CD) được quản lý hoàn toàn, tự động hóa quy trình phát hành phần mềm của bạn. Mỗi khi có thay đổi được thực hiện đối với mã nguồn của bạn, CodePipeline có thể tự động xây dựng, kiểm tra và triển khai ứng dụng của bạn dựa trên quy trình phát hành mà bạn xác định.\nKhi được tích hợp với Amazon Elastic Container Service (ECS) — một dịch vụ điều phối container được quản lý hoàn toàn — CodePipeline cho phép bạn tự động hóa việc triển khai các ứng dụng container hóa vào các tác vụ và dịch vụ ECS. Quá trình tự động hóa này đảm bảo rằng các bản cập nhật cho ứng dụng của bạn được phản ánh một cách liền mạch và nhất quán trong môi trường production của bạn.\nTổng quan về Quy trình Triển khai ECS Một pipeline triển khai điển hình cho các ứng dụng container hóa vào ECS bằng CodePipeline bao gồm bốn stage chính:\nSource Stage (Giai đoạn Nguồn): Trong stage này, CodePipeline lấy mã mới nhất từ kho lưu trữ mã nguồn của bạn, chẳng hạn như GitHub, AWS CodeCommit, or Bitbucket. Pipeline được kích hoạt tự động mỗi khi có commit hoặc push mã, đảm bảo rằng mọi thay đổi đều đi vào quy trình triển khai.\nBuild Stage (Giai đoạn Xây dựng): Tại đây, mã ứng dụng được biên dịch và các Docker image được xây dựng bằng các dịch vụ như AWS CodeBuild. Trong stage này, bạn cũng có thể bao gồm các unit test hoặc các công cụ phân tích mã tĩnh để duy trì chất lượng mã và phát hiện lỗi sớm.\nRegistry Push (Đẩy lên Registry): Sau khi Docker image được xây dựng thành công, nó sẽ được đẩy lên một container registry như Amazon Elastic Container Registry (ECR). Tại thời điểm này, bạn có thể tùy chọn thực hiện quét bảo mật để phát hiện các lỗ hổng hoặc các mối đe dọa tiềm ẩn, đảm bảo image an toàn cho việc triển khai.\nDeploy Stage (Giai đoạn Triển khai): Trong stage cuối cùng, dịch vụ ECS được cập nhật với Docker image mới từ ECR. Điều này bao gồm việc cập nhật task definition của ECS để sử dụng phiên bản image mới nhất và hướng dẫn dịch vụ ECS khởi chạy các tác vụ mới dựa trên định nghĩa đã cập nhật này. Đối với các chiến lược triển khai nâng cao hơn, bạn có thể tích hợp AWS CodeDeploy để kích hoạt blue/green deployments, giảm thiểu thời gian ngừng hoạt động và hỗ trợ rollback tự động nếu có sự cố xảy ra.\nLợi ích chính của việc sử dụng CodePipeline với ECS Phát hành nhanh hơn: Tự động hóa mọi bước để giảm thời gian từ khi commit mã đến khi triển khai.\nÍt lỗi hơn: Tự động hóa giảm thiểu các bước thủ công, giảm nguy cơ mắc lỗi do con người.\nTăng khả năng hiển thị và kiểm soát: Theo dõi và tùy chỉnh từng stage của quy trình triển khai của bạn.\nCải thiện bảo mật và độ tin cậy: Kết hợp kiểm thử, quét image và các chiến lược triển khai nâng cao như blue/green hoặc canary deployments.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "Điều kiện tiên quyết cho CI/CD Pipeline Trong lab này, chúng ta sẽ cấu hình triển khai Amazon ECS mặc định bằng AWS CodePipeline.\nQuá trình thiết lập bao gồm việc tạo các tài nguyên sau:\nMột kho lưu trữ Github để chứa mã nguồn của Ứng dụng Cửa hàng Bán lẻ (Vui lòng tham khảo phần Fundamentals để lấy mã nguồn_).\nMột Amazon Elastic Container Registry (ECR) để lưu trữ các Docker image của ứng dụng (Vui lòng tham khảo phần Fundamentals để tạo ECR_).\nMột Amazon S3 bucket để đóng vai trò là kho lưu trữ artifact cho pipeline.\nMột dự án AWS CodeBuild để biên dịch mã nguồn và xây dựng Docker image.\nMột AWS CodePipeline để tự động hóa và điều phối quy trình triển khai.\nMột tham số AWS Systems Manager Parameter Store để theo dõi ID build mới nhất.\nMột bản sao cục bộ của kho lưu trữ Cửa hàng Bán lẻ để chỉnh sửa và commit các thay đổi mã.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequisites/1-iam-roles/",
	"title": "Tạo IAM Roles",
	"tags": [],
	"description": "",
	"content": "1. Tạo IAM Roles cho Code Build Truy cập IAM Dashboard\nChọn Access Management \u0026gt; Roles \u0026gt; Create Role Chọn AWS Service\nService or use case: CodeBuild\nUse case: CodeBuild, Chọn Next\nNhập và chọn các tên policy sau:\nAmazonEC2ContainerRegistryFullAccess AmazonS3FullAccess CloudWatchLogsFullAccess Nhập Role name: ecs-workshop-codebuild-rolling-deployment Chọn Add permissions\nSau khi role được tạo, chọn Add permissions, chọn Create inline policy Chọn tab JSON\nThêm đoạn JSON sau:\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;ssm:PutParameter\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:ssm:$AWS_REGION:${ACCOUNT_ID}:parameter/codebuild/retail-store-sample-ui-latest-image\u0026#34; //Cập nhật Region, Account ID theo môi trường của bạn.\r}\r]\r} Nhập Policy name: IAM-role-used-by-CodeBuild-to-allow-it-to-write-to-Parameter-Store\nChọn Create Policy\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequisites/2-create-s3-bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Amazon S3 Bucket – Kho lưu trữ Artifact cho Pipeline Là một phần của việc thiết lập quy trình CI/CD, chúng ta sẽ tạo một bucket Amazon S3 để đóng vai trò là kho lưu trữ artifact cho AWS CodePipeline. Bucket này sẽ tạm thời chứa các artifact build (chẳng hạn như mã đã biên dịch, tham chiếu Docker image hoặc các descriptor triển khai) được chuyển giao giữa các stage khác nhau của pipeline.\nTại sao nó quan trọng?\nCodePipeline sử dụng S3 để lưu trữ và truyền dữ liệu giữa các stage Source, Build và Deploy.\nNó đảm bảo rằng mỗi stage đều có quyền truy cập vào các output cần thiết để thực thi đúng cách.\nS3 cung cấp độ bền, khả năng mở rộng và độ tin cậy, khiến nó trở nên lý tưởng cho việc lưu trữ artifact.\nCác điểm chính:\nBucket S3 nên ở cùng region với pipeline và dịch vụ ECS của bạn để đảm bảo hiệu suất và tuân thủ.\nNên bật versioning để lưu giữ các phiên bản lịch sử của artifact.\nBạn có thể thiết lập các lifecycle policy để tự động dọn dẹp các artifact cũ và tiết kiệm chi phí lưu trữ.\nTùy chọn, bạn có thể sử dụng bucket policy hoặc mã hóa S3 để tăng cường bảo mật.\nBucket này là một thành phần cơ bản của pipeline và phải được cấu hình đúng cách trước khi xây dựng phần còn lại của quy trình CI/CD.\nTạo S3 Bucket Truy cập S3 Dashboard Chọn Create Bucket\nNhập Bucket name Giữ nguyên các phần còn lại theo mặc định, Chọn Create Bucket Chúc mừng bạn, bạn đã tạo thành công một S3 Bucket. "
},
{
	"uri": "//localhost:1313/vi/3-create-build-stage/",
	"title": "Giai đoạn build được triển khai bằng AWS CodeBuild.",
	"tags": [],
	"description": "",
	"content": "Xem xét Giai đoạn Build của CI/CD Pipeline Giai đoạn build của pipeline được vận hành bởi AWS CodeBuild, một dịch vụ build được quản lý hoàn toàn chạy trên cloud. CodeBuild chịu trách nhiệm cho:\nBiên dịch mã nguồn của bạn\nChạy các unit test hoặc integration test (nếu được cấu hình)\nTạo ra các artifact output sẵn sàng cho việc triển khai\nAWS CodeBuild sử dụng một file cấu hình có tên là buildspec.yml, được viết bằng định dạng YAML. File này định nghĩa các build phase, biến môi trường và các artifact output cho quá trình build.\nBạn có thể tham khảo tài liệu chính thức của AWS về buildspec.yml để có thông tin chi tiết.\nPhân tích Cấu trúc Buildspec Dưới đây là tổng quan cấp cao về các stage được định nghĩa trong file buildspec.yml được sử dụng trong workshop này:\ninstall: Cài đặt các công cụ hoặc dependency cần thiết (nếu cần).\npre_build:\nTải các biến môi trường\nĐăng nhập vào Amazon ECR bằng AWS CLI\nbuild: Xây dựng Docker container image bằng Dockerfile trong repository của bạn.\npost_build: Đẩy image vừa được build lên repository Amazon ECR.\nartifacts: Định nghĩa các artifact output của build sẽ được chuyển đến stage tiếp theo của pipeline. Trong ví dụ của chúng ta, CodeBuild sẽ tạo và xuất ra các artifact sau:\nimagedefinitions.json: Được sử dụng để cập nhật dịch vụ ECS với image mới\nimageDetail.json: Chứa metadata về Docker image đã được build\ntaskdef.json: Định nghĩa task ECS được sử dụng để triển khai ứng dụng\n"
},
{
	"uri": "//localhost:1313/vi/3-create-build-stage/2-start-codebuild/",
	"title": "Start Build Project",
	"tags": [],
	"description": "",
	"content": " Sau khi tạo CodeBuild thành công\nChọn Start build Kiểm tra ECR Repository\nTruy cập Amazon Elastic Container Registry (Amazon ECR) Chọn Repositories. Chọn Repository đã tạo Bạn sẽ thấy Images đã được cập nhật.\nKiểm tra S3 Bucket\nTruy cập Amazon Simple Storage Service (Amazon S3) Chọn Bucket đã tạo Bạn sẽ thấy Objects đã được cập nhật.\nKhắc phục sự cố\nNếu bạn gặp lỗi trong quá trình build, hãy kiểm tra tệp Buildspec bằng cách:\nChọn Edit project Cuộn xuống và chỉnh sửa các lệnh trong Buildspec. "
},
{
	"uri": "//localhost:1313/vi/3-create-build-stage/1-create-codebuild/",
	"title": "Tạo CodeBuild Project",
	"tags": [],
	"description": "",
	"content": " Truy cập CodeBuild Dashboard Trong Build project dashboard, chọn Create project Trong phần Project configuration\nNhập Project name\nProject type: Default project\nTrong phần Source\nSource provider: Select Github Nếu bạn chưa kết nối với Github, vui lòng làm theo các bước sau.\nChọn Manage account credentials Credential type: Github App Connection: Create a new Github connection Nhập Connection name Chọn Connect to Github Enter Username and Password Github Select Sign in Nhập Authentication code Chọn Verify Nhập App installation đã tạo Chọn Connect Chọn Connection đã tạo Chọn Save Sau khi kết nối thành công Github App\nSource provider: Github Repository: Repository in my Github account Repository: Chọn Github repo đã tạo Source version: Nhánh của Github repository Trong phần Environment\nEnvironment image: Managed image Running mode: Container Operating system: Ubuntu Runtime(s): Standard Image: aws/codebuild/standard:5.0 Image version: Always use the latest image for this runtime version Service role: Existing service role Role ARN: Chọn role name: ecs-workshop-codebuild-rolling-deployment Select Additional configuration Privileged: Kiểm tra Enable this flag if you want to build Docker images or want your builds to get elevated privileges Trong phần Buildspec\nBuild specifications: Insert build commands Select Switch to editor Thêm đoạn JSON sau: version: 0.2\rphases:\rinstall:\rcommands:\r- echo Build started on `date`\rpre_build:\rcommands:\r- ACCOUNT_ID=$(aws sts get-caller-identity --query \u0026#34;Account\u0026#34; --output text)\r- echo Logging in to Amazon ECR in $AWS_REGION\r- COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-8)\r- IMAGE_TAG=${COMMIT_HASH:=latest}\r- IMAGE_TAG_I=i$(date +%Y%m%d%H%M%S)-${COMMIT_HASH:=latest}\r- ECR_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/retail-store-sample-ui //Update the name your ECR\r- echo ECR_URI=$ECR_URI\r- echo IMAGE_TAG=$IMAGE_TAG - echo IMAGE_TAG_I=$IMAGE_TAG_I\r- aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI\rbuild:\rcommands:\r- echo Building a container image ...\r- component=ui\r- component_dir=\u0026#34;./src/$component\u0026#34;\r- cd $component_dir\r- docker build -t $ECR_URI:$IMAGE_TAG .\r- docker tag $ECR_URI:$IMAGE_TAG $ECR_URI:$IMAGE_TAG_I\r- docker images\rpost_build:\rcommands:\r- docker push $ECR_URI:$IMAGE_TAG_I\r- docker push $ECR_URI:$IMAGE_TAG\r- cd ../..\r- echo Writing image definitions file...\r- printf \u0026#39;[{\u0026#34;name\u0026#34;:\u0026#34;application\u0026#34;,\u0026#34;imageUri\u0026#34;:\u0026#34;%s\u0026#34;}]\u0026#39; $ECR_URI:$IMAGE_TAG_I \u0026gt; imagedefinitions.json\r- printf \u0026#39;{\u0026#34;ImageURI\u0026#34;:\u0026#34;%s\u0026#34;}\u0026#39; $ECR_URI:$IMAGE_TAG_I \u0026gt; imageDetail.json\r- aws ssm put-parameter --name \u0026#34;/codebuild/retail-store-sample-ui-latest-image\u0026#34; --value \u0026#34;$IMAGE_TAG_I\u0026#34; --type \u0026#34;String\u0026#34; --overwrite\r- echo Build completed on `date`\rartifacts:\rname: BuildArtifact\rfiles:\r- imagedefinitions.json\r- imageDetail.json\r- taskdef.json Trong phần Artifact\nType: Amazon S3 Bucket name: Select the created Bucket Name: Nhập ecs-to-s3-artifact Chọn Create build project "
},
{
	"uri": "//localhost:1313/vi/4-execute-rolling-deployment/",
	"title": "Tiến hành triển khai Rolling",
	"tags": [],
	"description": "",
	"content": "Create Code Pipeline Chọn Pipeline \u0026ldquo;dưới tab Developer Tool\nChọn Create pipeline Trong phần Choose creation option\nChọn Build custom pipeline Chọn Next Trong phần Choose pipeline settings\nPipeline name: Nhập pipeline name của bạn Execution mode: Superseded Service role: New service role Role name: Nhập role name của bạn (e.g., AWSCodePipelineServiceRole-ECS-CodePipeline-Rolling-Deployment) Chọn Next Trong phần Add source stage\nSource provider: Github Connection: Chọn connection đã tạo Repository name: Chọn repo của bạn Default branch: Nhánh (Branch) của bạn (e.g., main) Giữ nguyên các phần còn lại theo mặc định, chọn Next Trong phần Add build stage\nBuild provider: Other build provider Chọn AWS CodeBuild Project name: Chọn CodeBuild project của bạn Build type: Single build Region: Chọn Region của bạn Chọn Next Trong phần Add test stage\nChọn Skip test stage Trong phần Add deploy stage\nDeploy provider: Amazon ECS Region: Region của bạn Cluster name: Chọn cluster đã tạo: retail-store-ecs-cluster Service name: ui Image definitions file: imagedefinitions.json Chọn Next Xem lại cấu hình Pipeline\nChọn Create pipeline Chờ cho đến khi các tiến trình từ Source \u0026gt; Build \u0026gt; Deploy hoàn tất "
},
{
	"uri": "//localhost:1313/vi/5-test-pipeline/",
	"title": "Test Pipeline",
	"tags": [],
	"description": "",
	"content": "Kiểm tra web application Dán URL vào trình duyệt web để truy cập ứng dụng và kiểm tra tiêu đề cũng như màu sắc của ứng dụng web, những thứ mà chúng ta sẽ thay đổi.\nLấy URL của load balancer:\nexport RETAIL_ALB=$(aws elbv2 describe-load-balancers --name retail-store-ecs-ui \\\r--query \u0026#39;LoadBalancers[0].DNSName\u0026#39; --output text)\recho http://${RETAIL_ALB} Triển khai các thay đổi Bây giờ, hãy chạy pipeline CI/CD đã tạo để thực hiện rolling deployment trong VS Code.\nĐổi tên banner giao diện chính với tiêu đề: Retail Store Sample CodePipeline Thay đổi màu của thanh điều hướng thành màu xanh lá (#0AD24A) FILE=\u0026#34;$HOME/Downloads/retail-store-sample-app-0.7.0/src/ui/src/main/resources/templates/fragments/layout.html\u0026#34; Thay thế đường dẫn có tên /Downloads/ bằng tên thư mục lưu trữ mã nguồn của bạn. Nếu gặp bất kỳ lỗi nào, bạn có thể chỉnh sửa nội dung đã hướng dẫn trực tiếp trong mã nguồn của mình.\nsed -i \u0026#39;s|Retail Store Sample\u0026lt;/a\u0026gt;|Retail Store Sample CodePipeline\u0026lt;/a\u0026gt;|g\u0026#39; $FILE\rsed -i \u0026#39;s|\u0026lt;nav class=\u0026#34;navbar navbar-expand-lg navbar-light bg-light\u0026#34;\u0026gt;|\u0026lt;nav class=\u0026#34;navbar navbar-expand-lg navbar-light bg-light\u0026#34; style=\u0026#34;background-color:#0AD24A !important\u0026#34;\u0026gt;|g\u0026#39; $FILE Xác minh xem các thay đổi đã được áp dụng thành công hay chưa bằng cách chạy lệnh sau:\ncat $FILE | grep \u0026#34;style=\\\u0026#34;background-color:#0AD24A\u0026#34;\rcat $FILE | grep CodePipeline Commit các thay đổi với Github repository:\ngit init\rgit status\rgit add .\rgit commit -m \u0026#34;update UI and color banner\u0026#34;\rgit push Có thể mất vài giây để pipeline bắt đầu.\nĐi đến bảng điều khiển AWS CodePipeline và nhấp vào pipeline để mở lần thực thi pipeline mới nhất. Khi giai đoạn Deploy bắt đầu, hãy nhấp vào liên kết sau để xem xét quá trình triển khai: Open ECS Deployment dashboard\nKiểm tra thay đổi của web application Khi quá trình triển khai hoàn tất, truy cập ứng dụng web:\nexport RETAIL_ALB=$(aws elbv2 describe-load-balancers --name retail-store-ecs-ui \\\r--query \u0026#39;LoadBalancers[0].DNSName\u0026#39; --output text)\recho http://${RETAIL_ALB}:8080 ; echo Xác nhận rằng tiêu đề đã thay đổi thành Retail Store Sample CodePipeline và thanh điều hướng hiện có nền màu xanh lá (#0AD24A).\n- Sau đó - Trước đó Chúc mừng bạn! Thông qua bài lab này, bạn đã xây dựng thành công một pipeline CI/CD và triển khai một dịch vụ ECS mới bằng chiến lược triển khai rolling deployment.\n"
},
{
	"uri": "//localhost:1313/vi/6-clean-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiếp tục với các bước sau để xóa các tài nguyên mà chúng ta đã tạo trong bài lab này.\nXóa CodePipeline Trong phần Pipelines:\nChọn Pipeline đã tạo\nChọn Delete pipeline Nhập delete để xác nhận việc xóa\nChọn Delete Xóa CodeBuild Trong phần Build projects:\nChọn project đã tạo\nChọn Actions\nChọn Delete Chọn delete để xác nhận việc xóa\nChọn Delete Delete S3 Trong phần S3 Bucket\nChọn bucket đã tạo Chọn Empty Nhập permanently delete để xác nhận việc xóa Tiếp tục chọn bucket đã tạo Chọn Delete Nhập tên của bucket để xác nhận việc xóa Các tài nguyên còn lại sẽ được sử dụng cho bài lab tiếp theo.\n"
},
{
	"uri": "//localhost:1313/vi/7-conclusion/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Trong mô-đun Tự động hóa này, chúng ta đã triển khai thành công một số thành phần quan trọng giúp tự động hóa việc triển khai các ứng dụng dạng container lên Amazon ECS bằng cách sử dụng AWS CodePipeline, bao gồm:\nTích hợp AWS CodePipeline với ECS: Chúng ta đã tự động hóa toàn bộ quy trình từ khi có thay đổi trong mã nguồn cho đến khi triển khai, giúp tăng tốc độ và độ tin cậy của việc phát hành phần mềm.\nBốn giai đoạn chính trong Pipeline:\nGiai đoạn Source (Nguồn): Lấy mã nguồn mới nhất từ kho mã như GitHub hoặc AWS CodeCommit.\nGiai đoạn Build (Xây dựng): Biên dịch mã nguồn, tạo ảnh Docker bằng AWS CodeBuild và tùy chọn chạy các bài kiểm tra.\nĐẩy lên Registry: Đẩy ảnh Docker đã xây dựng lên Amazon ECR, có thể kèm theo quét bảo mật tùy chọn.\nGiai đoạn Deploy (Triển khai): Cập nhật dịch vụ ECS bằng ảnh Docker mới bằng cách cập nhật task definition và khởi chạy các task mới.\nChiến lược Triển khai Cuốn Chiếu (Rolling Deployment):\nChúng ta đã triển khai chiến lược cập nhật cuốn chiếu để dần thay thế phiên bản cũ bằng phiên bản mới, giảm thiểu thời gian gián đoạn và đảm bảo dịch vụ luôn khả dụng.\nChiến lược này được kiểm soát thông qua các tham số chính như minimumHealthyPercent và maximumPercent để quản lý tốc độ và độ ổn định của việc triển khai.\nCác bước Kiểm thử \u0026amp; Phê duyệt (Tùy chọn):\nThêm các bài kiểm thử tích hợp hoặc kiểm thử khói sau khi triển khai.\nBao gồm các bước phê duyệt thủ công để tăng cường kiểm soát trước khi tiếp tục triển khai.\nGiám sát \u0026amp; Khôi phục (Rollback):\nKích hoạt giám sát thông qua CloudWatch Logs, sự kiện dịch vụ ECS và cảnh báo từ CloudWatch.\nCấu hình tự động quay lại phiên bản ổn định trước đó nếu quá trình triển khai gặp lỗi.\nCác bước tiếp theo Tiếp tục hành trình học tập Amazon ECS của bạn bằng cách khám phá các mô-đun workshop chuyên sâu sau:\nAuto Scaling – Tìm hiểu cách mở rộng ứng dụng một cách linh hoạt theo nhu cầu\nNetworking – Làm chủ các khái niệm và cách triển khai mạng trong ECS\nObservability – Triển khai các giải pháp giám sát toàn diện\nSecurity – Áp dụng các biện pháp bảo mật mạnh mẽ và các thực tiễn tốt nhất\nAutomation – Tự động hóa các quy trình triển khai\nStorage – Tích hợp Amazon EFS để lưu trữ dữ liệu lâu dài\nMỗi mô-đun đều cung cấp trải nghiệm thực hành chi tiết giúp bạn xây dựng các ứng dụng ECS sẵn sàng cho môi trường sản xuất.\nNgười đóng góp Le Minh Nghia - https://www.linkedin.com/in/minhnghia2k3/\nTran Doan Cong Ly - https://www.linkedin.com/in/trandoancongly/\nTran Anh Truong - www.linkedin.com/in/trường-trần-494a35275/\nTài liệu tham khảo Automation - https://catalog.workshops.aws/ecs-immersion-day/en-US/80-ci-cd\nRolling Deployent - https://catalog.workshops.aws/ecs-immersion-day/en-US/80-ci-cd/rolling\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]